name: 'Gitops deploy action'
description: "Update YAML in gitops repo using fjogeleit/yaml-update-action"

inputs:
  repository:
    description: 'GitOps repository to update'
    required: false
    default: 'repotea-workflow/gitops'
  deploy_key:
    description: 'SSH deploy key for repository'
    required: true
  changes:
    description: 'JSON for multi-file/multi-value changes'
    required: false
  valueFile:
    description: 'Path to YAML file to update (relative to repo root)'
    required: false
  propertyPath:
    description: 'Property path to update'
    required: false
  value:
    description: 'Value to set'
    required: false

  project_name:
    description: 'project name'
    required: false
  commit_message:
    description: 'commit message'
    required: false
  ac_git_ref:
    description: 'action context: git ref'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if gitops repo already exists
      id: check-gitops-repo
      shell: bash
      run: |
        if [ -d "gitops-repo" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "GitOps repo directory already exists, skipping checkout"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "GitOps repo directory does not exist, will checkout"
        fi

    - name: Checkout gitops repo
      if: steps.check-gitops-repo.outputs.exists == 'false'
      uses: actions/checkout@v5
      with:
        repository: ${{ inputs.repository }}
        ssh-key: ${{ inputs.deploy_key }}
        path: gitops-repo
        fetch-depth: 0

    - name: Update YAML using fjogeleit/yaml-update-action
      uses: fjogeleit/yaml-update-action@main
      with:
        workDir: gitops-repo
        commitChange: 'false'
        changes: ${{ inputs.changes }}
        valueFile: ${{ inputs.valueFile }}
        propertyPath: ${{ inputs.propertyPath }}
        value: ${{ inputs.value }}

    - name: Generate message
      id: generate-commit-message
      shell: bash
      run: |
        INPUT_PROJECT_NAME=${{ inputs.project_name }}
        INPUT_COMMIT_MESSAGE="${{ inputs.commit_message }}"
        INPUT_AC_GIT_REF=${{ inputs.ac_git_ref }}

        if [ -f "${INPUT_COMMIT_MESSAGE}" ]; then
          INPUT_COMMIT_MESSAGE=$(cat ${INPUT_COMMIT_MESSAGE})
        fi

        if [ -f "${INPUT_AC_GIT_REF}" ]; then
          INPUT_AC_GIT_REF=$(cat ${INPUT_AC_GIT_REF})
        fi

        PROJECT_NAME=${INPUT_PROJECT_NAME:-$DEFAULT_PROJECT_NAME}
        COMMIT_MSG=${INPUT_COMMIT_MESSAGE:-$DEFAULT_COMMIT_MESSAGE}
        AC_GIT_REF=${INPUT_AC_GIT_REF:-$DEFAULT_BRANCH_NAME}

        DESCRIPTION="Actions Context:
        * Git Ref: ${AC_GIT_REF}
        * Build started at: ${{ github.event.head_commit.timestamp }}
        * Source: ${{ github.event_name }}
        * Workflows: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        "
        MESSAGE="[${PROJECT_NAME}]: ${DESCRIPTION} ${COMMIT_MSG}"

        echo "message=${MESSAGE}" >> $GITHUB_OUTPUT

    - uses: EndBug/add-and-commit@v9
      with:
        add: '.'
        committer_name: GitHub Actions
        committer_email: 41898282+github-actions[bot]@users.noreply.github.com
        commit: --signoff
        cwd: './gitops-repo'
        message: ${{ steps.generate-commit-message.outputs.message }}
        push: true

    # - name: Commit and push
    #   working-directory: gitops-repo
    #   shell: bash
    #   run: |
    #     git config user.name github-actions
    #     git config user.email 41898282+github-actions[bot]@users.noreply.github.com
    #     git add .
    #     git commit -m "Test"
    #     git push
